// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using exanim.root.Data;

#nullable disable

namespace exanim.root.Migrations
{
    [DbContext(typeof(AppCtx))]
    [Migration("20250803161630_Global")]
    partial class Global
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("exanim.core.Entities.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("BrandId")
                        .HasName("PK_Brand");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.CFAgencia", b =>
                {
                    b.Property<Guid>("AgenciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("PlanEnum")
                        .HasColumnType("tinyint");

                    b.Property<string>("RFC")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgenciaId")
                        .HasName("PK_CFAgencia");

                    b.HasIndex("UsuarioId");

                    b.ToTable("CFAgencia", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.CFConfigura", b =>
                {
                    b.Property<Guid>("AgenciaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParametroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cadena")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("AgenciaId", "ParametroId")
                        .HasName("PK_CFConfigura");

                    b.HasIndex("ParametroId");

                    b.ToTable("CFConfigura", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.CFOperador", b =>
                {
                    b.Property<Guid>("OperadorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<Guid>("AgenciaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OperadorId")
                        .HasName("PK_CFOperador");

                    b.HasIndex("AgenciaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("CFOperador", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.CFParametro", b =>
                {
                    b.Property<Guid>("ParametroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("ParametroId")
                        .HasName("PK_CFParametro");

                    b.ToTable("CFParametro", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.CFPerfil", b =>
                {
                    b.Property<Guid>("PerfilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Grupo")
                        .HasColumnType("tinyint");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("PerfilId")
                        .HasName("PK_CFPerfil");

                    b.ToTable("CFPerfil", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.CFTaller", b =>
                {
                    b.Property<Guid>("TallerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<Guid>("AgenciaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TallerId")
                        .HasName("PK_CFTaller");

                    b.HasIndex("AgenciaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("CFTaller", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.CFUsuario", b =>
                {
                    b.Property<Guid>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<Guid>("PerfilId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("UsuarioId")
                        .HasName("PK_CFUsuario");

                    b.HasIndex("PerfilId");

                    b.ToTable("CFUsuario", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.OPAccion", b =>
                {
                    b.Property<Guid>("AccionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Autoriza")
                        .HasColumnType("bit");

                    b.Property<bool>("EsPrevio")
                        .HasColumnType("bit");

                    b.Property<bool>("Notifica")
                        .HasColumnType("bit");

                    b.Property<Guid>("PasoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PerfilId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccionId")
                        .HasName("PK_OPAccion");

                    b.HasIndex("PasoId");

                    b.ToTable("OPAccion", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.OPAutoriza", b =>
                {
                    b.Property<Guid>("AutorizaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Autorizado")
                        .HasColumnType("bit");

                    b.Property<Guid>("AvanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.HasKey("AutorizaId")
                        .HasName("PK_OPAutoriza");

                    b.HasIndex("AccionId");

                    b.ToTable("OPAutoriza", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.OPAvance", b =>
                {
                    b.Property<Guid>("AvanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Anotacion")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<Guid>("EstatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OrdenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AvanceId")
                        .HasName("PK_OPAvance");

                    b.HasIndex("EstatusId");

                    b.HasIndex("OrdenId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("OPAvance", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.OPClase", b =>
                {
                    b.Property<Guid>("ClaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<Guid>("AgenciaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ClaseId")
                        .HasName("PK_OPClase");

                    b.HasIndex("AgenciaId");

                    b.ToTable("OPClase", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.OPEstatus", b =>
                {
                    b.Property<Guid>("EstatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<Guid>("AgenciaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Fase")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("EstatusId")
                        .HasName("PK_OPEstatus");

                    b.HasIndex("AgenciaId");

                    b.ToTable("OPEstatus", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.OPInstalacion", b =>
                {
                    b.Property<Guid>("InstalacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Cantidad")
                        .HasColumnType("real");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<Guid>("OperadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrdenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PiezaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Serie")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("InstalacionId")
                        .HasName("PK_OPInstalacion");

                    b.HasIndex("OrdenId");

                    b.HasIndex("PiezaId");

                    b.ToTable("OPInstalacion", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.OPOrden", b =>
                {
                    b.Property<Guid>("OrdenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Condicion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Correo")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<Guid>("EstatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnType("datetime");

                    b.Property<Guid>("GestorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Problema")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("TallerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnidadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrdenId")
                        .HasName("PK_OPOrden");

                    b.HasIndex("EstatusId");

                    b.HasIndex("GestorId");

                    b.HasIndex("TallerId");

                    b.HasIndex("UnidadId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("OPOrden", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.OPPaso", b =>
                {
                    b.Property<Guid>("PasoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<Guid>("AvanzaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrevioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Tipo")
                        .HasColumnType("tinyint");

                    b.HasKey("PasoId")
                        .HasName("PK_OPPaso");

                    b.HasIndex("AvanzaId");

                    b.HasIndex("PrevioId");

                    b.ToTable("OPPaso", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.OPPieza", b =>
                {
                    b.Property<Guid>("PiezaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<Guid>("AgenciaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PiezaId")
                        .HasName("PK_OPPieza");

                    b.HasIndex("AgenciaId");

                    b.HasIndex("ClaseId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("OPPieza", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.OPRemocion", b =>
                {
                    b.Property<Guid>("RemocionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Cantidad")
                        .HasColumnType("real");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("OperadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrdenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PiezaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Serie")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("RemocionId")
                        .HasName("PK_OPRemocion");

                    b.HasIndex("OrdenId");

                    b.HasIndex("PiezaId");

                    b.ToTable("OPRemocion", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.VECompania", b =>
                {
                    b.Property<Guid>("CompaniaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RFC")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompaniaId")
                        .HasName("PK_VECompania");

                    b.ToTable("VECompania", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.VECotizacion", b =>
                {
                    b.Property<Guid>("CotizacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Aceptada")
                        .HasColumnType("bit");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<Guid>("AgenciaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<double>("Monto")
                        .HasColumnType("float");

                    b.Property<Guid?>("OrdenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Vigencia")
                        .HasColumnType("datetime");

                    b.HasKey("CotizacionId")
                        .HasName("PK_VECotizacion");

                    b.HasIndex("AgenciaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("VECotizacion", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.VEGestor", b =>
                {
                    b.Property<Guid>("GestorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<Guid>("CompaniaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GestorId")
                        .HasName("PK_VEGestor");

                    b.HasIndex("CompaniaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("VEGestor", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.VELinea", b =>
                {
                    b.Property<Guid>("LineaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Cantidad")
                        .HasColumnType("real");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("CotizacionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Importe")
                        .HasColumnType("real");

                    b.Property<float>("Precio")
                        .HasColumnType("real");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("LineaId")
                        .HasName("PK_VELinea");

                    b.HasIndex("CotizacionId");

                    b.ToTable("VELinea", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.VEUnidad", b =>
                {
                    b.Property<Guid>("UnidadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Anio")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("MarcaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("Registrado")
                        .HasColumnType("datetime");

                    b.HasKey("UnidadId")
                        .HasName("PK_VEUnidad");

                    b.HasIndex("MarcaId");

                    b.ToTable("VEUnidad", (string)null);
                });

            modelBuilder.Entity("exanim.core.Entities.CFAgencia", b =>
                {
                    b.HasOne("exanim.core.Entities.CFUsuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.CFConfigura", b =>
                {
                    b.HasOne("exanim.core.Entities.CFAgencia", null)
                        .WithMany()
                        .HasForeignKey("AgenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.CFParametro", null)
                        .WithMany()
                        .HasForeignKey("ParametroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.CFOperador", b =>
                {
                    b.HasOne("exanim.core.Entities.CFAgencia", null)
                        .WithMany()
                        .HasForeignKey("AgenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.CFUsuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.CFTaller", b =>
                {
                    b.HasOne("exanim.core.Entities.CFAgencia", null)
                        .WithMany()
                        .HasForeignKey("AgenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.CFUsuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("exanim.core.Entities.Location", "Lugar", b1 =>
                        {
                            b1.Property<Guid>("CFTallerTallerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("Lat")
                                .HasColumnType("real");

                            b1.Property<float>("Lng")
                                .HasColumnType("real");

                            b1.HasKey("CFTallerTallerId");

                            b1.ToTable("CFTaller");

                            b1.ToJson("Lugar");

                            b1.WithOwner()
                                .HasForeignKey("CFTallerTallerId");
                        });

                    b.Navigation("Lugar")
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.CFUsuario", b =>
                {
                    b.HasOne("exanim.core.Entities.CFPerfil", null)
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.OPAccion", b =>
                {
                    b.HasOne("exanim.core.Entities.OPPaso", null)
                        .WithMany()
                        .HasForeignKey("PasoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.OPAutoriza", b =>
                {
                    b.HasOne("exanim.core.Entities.OPAccion", null)
                        .WithMany()
                        .HasForeignKey("AccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.OPAvance", null)
                        .WithMany()
                        .HasForeignKey("AccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.OPAvance", b =>
                {
                    b.HasOne("exanim.core.Entities.OPEstatus", null)
                        .WithMany()
                        .HasForeignKey("EstatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.OPOrden", null)
                        .WithMany()
                        .HasForeignKey("OrdenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.CFUsuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.OPClase", b =>
                {
                    b.HasOne("exanim.core.Entities.CFAgencia", null)
                        .WithMany()
                        .HasForeignKey("AgenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.OPEstatus", b =>
                {
                    b.HasOne("exanim.core.Entities.CFAgencia", null)
                        .WithMany()
                        .HasForeignKey("AgenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.OPInstalacion", b =>
                {
                    b.HasOne("exanim.core.Entities.OPOrden", null)
                        .WithMany()
                        .HasForeignKey("OrdenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.OPPieza", null)
                        .WithMany()
                        .HasForeignKey("PiezaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.OPOrden", b =>
                {
                    b.HasOne("exanim.core.Entities.OPEstatus", null)
                        .WithMany()
                        .HasForeignKey("EstatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.VEGestor", null)
                        .WithMany()
                        .HasForeignKey("GestorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.CFTaller", null)
                        .WithMany()
                        .HasForeignKey("TallerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.VEUnidad", null)
                        .WithMany()
                        .HasForeignKey("UnidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.CFUsuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.OPPaso", b =>
                {
                    b.HasOne("exanim.core.Entities.OPEstatus", null)
                        .WithMany()
                        .HasForeignKey("AvanzaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.OPEstatus", null)
                        .WithMany()
                        .HasForeignKey("PrevioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.OPPieza", b =>
                {
                    b.HasOne("exanim.core.Entities.CFAgencia", null)
                        .WithMany()
                        .HasForeignKey("AgenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.OPClase", null)
                        .WithMany()
                        .HasForeignKey("ClaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.CFUsuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.OPRemocion", b =>
                {
                    b.HasOne("exanim.core.Entities.OPOrden", null)
                        .WithMany()
                        .HasForeignKey("OrdenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.OPPieza", null)
                        .WithMany()
                        .HasForeignKey("PiezaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.VECotizacion", b =>
                {
                    b.HasOne("exanim.core.Entities.CFAgencia", null)
                        .WithMany()
                        .HasForeignKey("AgenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.CFUsuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.VEGestor", b =>
                {
                    b.HasOne("exanim.core.Entities.VECompania", null)
                        .WithMany()
                        .HasForeignKey("CompaniaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("exanim.core.Entities.CFUsuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.VELinea", b =>
                {
                    b.HasOne("exanim.core.Entities.VECotizacion", null)
                        .WithMany()
                        .HasForeignKey("CotizacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("exanim.core.Entities.VEUnidad", b =>
                {
                    b.HasOne("exanim.core.Entities.Brand", null)
                        .WithMany()
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
